from Crypto.Util.number import *
from functools import reduce
import gmpy2
from gmpy2 import mpz

with open('output.txt', 'r') as f:
    outputs = [int(l.strip()) for l in f.readlines() if l.strip()]

n = 178687641710030174725391391875667596365020728306319047485522635263856928788792264392747544630866502200298051103123255099970617381333101830066744705357923051686594736448334538740566230676008114657220351133399973716405404704654132288956810705849964560317000445171090246556869619036945752872429931964062189095563138744809626920021187533539499744999940892826446388022339663656502481337983590571794320931540723276842297611798866462197198435976264905955663723006770230633947206618763194442570290448812114549218867835561537767658934219897738952522114759281325723662384407818238388836452701782722266368637081847540663426878964206423537416368928558513511910356279139696064536450514293833309698627046383863195702404780871841847505106126552260648896877439999464328457911073105705457119731432752925110957852530172829266128412160058897537830972644942192992462097998221061279622581673295977766215387020119500286919736797464640883769066399346357647673531235429835830770457120931424234362943301312350110319595495619381
e = 65537
cipher = outputs.pop()

pads = [b'\x04', b'\x02', b'\x00', b'\x01', b'\x03']

messages = []
for i in range(len(pads)):
    for j in range(len(pads)):
        msg = pads[j] * (i + 1) + b'TMUCTF' + pads[len(pads) - j - 1] * (i + 1)
        messages.append( (mpz(bytes_to_long(msg)), outputs[i * len(pads) + j]) )


# G = mpz(0)
# for i in range(len(messages)):
#     a1 = pow(messages[i][0], e) - messages[i][1] 
#     for j in range(i):
#         a2 = pow(messages[j][0], e) - messages[j][1] 
#         G = gmpy2.gcd(G, abs(a1 - a2))

# n = int(G)

for m, c in messages:
    assert c == pow(m, e, n)

